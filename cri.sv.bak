/*
    Top code to test all other modules
*/
module cri(
        input ADC_CLK_10,
        input [1:0] KEY,
        input [9:0] SW
    );

    reg [31:0] data, memIfAddr, iw_current, pc_current, rs1_data, rs2_data, alu_out, i_rdata, rs1_reg, rs2_reg, rsd_reg;

    // Include files
    `include "rv32i_memInterface.sv"    // Files to format data for Dual Port RAM module

    rv32i_ifTop ifTopInstance(          // Instantiate the Instruction Fetch stage
        .clk(ADC_CLK_10),               // Clock
        .reset(KEY[0]),                 // Reset
        .memIfData(i_rdata),            // From SyncDualPortRam module
        .memIfAddr(memIfAddr),          // Return value to feed into SyncDualPortRam module
        .iw_out(iw_current),            // Instruction Word
        .pc_out(pc_current)             // Program Counter as calculated here
    );

    rv32i_idTop idTopInstance(          // Instantiate the Instruction Decode stage
        .clk(ADC_CLK_10),               // Clock
        .reset(KEY[0]),                 // Reset
        .iw_in(iw_current),             // Instruction Word                         | From ifTop module
        .pc_in(pc_current),             // Program Counter                          | From ifTop module
        .regTop_rs1_data(rs1_data),     // Register data from Register Interface    | From regFs module
        .regTop_rs2_data(rs2_data)      // Register data from Register Interface    | From regFs module
        .regTop_rs1_reg(rs1_reg),       // Register to read from                    | To regFs module
        .regTop_rs2_reg(rs2_reg),       // Register to read from                    | To regFs module
        .regTop_wb_reg(rsd_reg)         // REgister to write into                   | To regFs module
    );

    rv32i_reg regFsInstance (           // Instantiate Register File System
        .reset(KEY[0]),                 // Reset
        .clk(ADC_CLK_10),               // Clock
        .wb_enable(wb_enable),          // Write Enable/Disable
        .rs1_reg(rs1_reg),              // Register to read                         | From idTop module
        .rs2_reg(rs2_reg),              // Register to read                         | From idTop module
        .wb_reg(rsd_reg),               // Register to write into                   | From idTop module
        .wb_data(wb_data),              // Data to write to register                | From exTop module
        .rs1_data(rs1_data),            // Read data                                | To idTop module
        .rs2_data(rs2_data)             // Read data                                | To idTop module
    );

    rv32i_exTop exTopInstance(          // Instantiate ALU system
        .clk(ADC_CLK_10),               // Clock
        .reset(KEY[0]),                 // Reset
        .pc_in(pc_current),             // Current Program Counter
        .iw_in(iw_current),             // Current Instruction Word
        .rs1_data_in(rs1_data),         // Data to manipulate
        .rs2_data_in(rs2_data),         // Data to manipulate
        .alu_out(alu_out),              // Result of operations
        .pc_out(pc_current),            // Updated Program Counter
        .iw_out(iw_current)             // Updated Instruction Word
    );

    rv32i_memTop memTopInstance(        // Instantiate Memory stage
        .clk(ADC_CLK_10),               // Clock
        .reset(KEY[0]),                 // Reset
        .pc_in(pc_current),             // Current Program Counter
        .iw_in(iw_current),             // Current Instruction Word
        .alu_in(alu_out),               // Output from the ALU
        .pc_out(pc_current),            // Updated Program Counter
        .iw_out(iw_current)             // Updated Instruction Word
    );

    rv32i_wbTop wbTopinstance(          // Instantiate WriteBack stage
        .clk(ADC_CLK_10),               // Clock
        .reset(KEY[0]),                 // Reset
        .pc_in(pc_current),             // Current Program Counter
        .iw_in(iw_current),             // Current Instruction Word
    );

    rv32i_syncDualPortRam ramTest(      // Instantiate Dual Port RAM module
        .clk(ADC_CLK_10),               // Clock
        .i_addr(memIfAddr),             // Instruction Address: From Instruction Fetch module
        .d_addr(alu_out[31:2]),         // Data Address: To fetch data from
        .d_we(d_we),                    // Data Write Enable
        .d_be(writeBankEnable(alu_out[1:0], width)),            // Data Bank Enable
        .d_wdata(shifted_rs2_data(rs2_data, alu_out[1:0])),     // Data to be written
        .d_rdata(d_rdata),                                      // Read data
        .i_rdata(i_rdata)                                       // Read Instruction Word
    );


endmodule
